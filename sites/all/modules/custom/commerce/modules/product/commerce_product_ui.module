<?php

function commerce_product_ui_product_type_new() {
	return [
		'type' => "",
		'name' =>"",
		'description' => "",
		"help" =>"",
		'revision' => 1
	];
}

function commerce_product_ui_product_type_save($product_type, $configure = TRUE, $skip_reset = FALSE) {
	$op = drupal_write_record('commerce_product_type', $product_type, empty($product_type['type']) ? 'type' : []);
	if ( !empty($product_type['is_new']) && $op !== FALSE) {
		field_attach_create_bundle('commerce_product', $product_type['type']);

		if ($configure) {
			commerce_product_configure_product_type($product_type['type']);
		}

		module_invoke_all('commerce_product_type_insert', $product_type, $skip_reset);
	} elseif ($op !== FALSE) {
			module_invoke_all('commerce_product_type_update', $product_type, $skip_reset);
	}

	if (!$skip_reset) {
		commerce_product_types_reset();
		variable_set('menu_rebuild_needed', TRUE);
	}

	return $op;
}

function commerce_product_ui_product_add_any_access() {
	if (user_access('administer commerce_product entities')) {
		return TRUE;
	}

	foreach (commerce_product_types() as $type => $product_type) {
		if (commerce_product_access('create', commerce_product_new($type))) {
			return TRUE;
		}
	}
}

function commerce_product_ui_menu() {

	$items['admin/commerce/products/add'] = array(
    'title' => 'Add a product',
    'description' => 'Add a new product for sale.',
    'page callback' => 'commerce_product_ui_add_page',
    'access callback' => 'commerce_product_ui_product_add_any_access',
    'weight' => 10,
    'file' => 'includes/commerce_product_ui.products.inc',
   );

	foreach(commerce_product_types() as $type => $product_type) {
	  $items['admin/commerce/products/add/' . strtr($type, array('_' => '-'))] = [
	  	'title' => 'Create !name',
      	'title arguments' => array('!name' => $product_type['name']),
      	'description' => $product_type['description'],
      	'page callback' => 'commerce_product_ui_product_form_wrapper',
      	'page arguments' => array(commerce_product_new($type)),
      	'access callback' => 'commerce_product_access',
      	'access arguments' => array('create', commerce_product_new($type)),
      	'file' => 'includes/commerce_product_ui.products.inc',
	  ];
	}

  $items['admin/commerce/products/%commerce_product'] = array(
    'title callback' => 'commerce_product_ui_product_title',
    'title arguments' => array(3),
    'page callback' => 'commerce_product_ui_product_form_wrapper',
    'page arguments' => array(3),
    'access callback' => 'commerce_product_access',
    'access arguments' => array('update', 3),
    'weight' => 0,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/commerce_product_ui.products.inc',
  );

  $items['admin/commerce/products/%commerce_product/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  $items['admin/commerce/products/%commerce_product/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'commerce_product_ui_product_delete_form_wrapper',
    'page arguments' => array(3),
    'access callback' => 'commerce_product_access',
    'access arguments' => array('delete', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/commerce_product_ui.products.inc',
  );

  $items['admin/commerce/products/types'] = array(
    'title' => 'Product types',
    'description' => 'Manage products types for your store.',
    'page callback' => 'commerce_product_ui_types_overview',
    'access arguments' => array('administer product types'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
    'file' => 'includes/commerce_product_ui.types.inc',
  );

    $items['admin/commerce/products/types/add'] = array(
    'title' => 'Add product type',
    'page callback' => 'commerce_product_ui_product_type_form_wrapper',
    'page arguments' => array(commerce_product_ui_product_type_new()),
    'access arguments' => array('administer product types'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/commerce_product_ui.types.inc',
  );

  foreach (commerce_product_types() as $type => $product_type) {
        // Convert underscores to hyphens for the menu item argument.
    $type_arg = strtr($type, '_', '-');
    $items['admin/commerce/products/types/' . $type_arg] = array(
      'title' => $product_type['name'],
      'page callback' => 'commerce_product_ui_product_type_form_wrapper',
      'page arguments' => array($type),
      'access arguments' => array('administer product types'),
      'file' => 'includes/commerce_product_ui.types.inc',
    );

    if ($product_type['module'] == 'commerce_product_ui') {
      $items['admin/commerce/products/types/' . $type_arg . '/edit'] = array(
        'title' => 'Edit',
        'access callback' => 'commerce_product_ui_product_type_update_access',
        'access arguments' => array($type),
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      );

      $items['admin/commerce/products/types/' . $type_arg . '/delete'] = array(
        'title' => 'Delete',
        'page callback' => 'commerce_product_ui_product_type_delete_form_wrapper',
        'page arguments' => array($type),
        'access callback' => 'commerce_product_ui_product_type_update_access',
        'access arguments' => array($type),
        'type' => MENU_LOCAL_TASK,
        'context' => MENU_CONTEXT_INLINE,
        'weight' => 10,
        'file' => 'includes/commerce_product_ui.types.inc',
      );
    }
  }
	return $items;
}

/**
 * Implements hook_commerce_product_type_info().
 */
function commerce_product_ui_commerce_product_type_info() {
  return db_query('SELECT * FROM {commerce_product_type}')->fetchAllAssoc('type', PDO::FETCH_ASSOC);
}


function commerce_product_new($type = '') {
  return entity_get_controller('commerce_product')->create(array('type' => $type));
}


/**
 * Implements hook_theme().
 */
function commerce_product_ui_theme() {
  return array(
    'product_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'includes/commerce_product_ui.products.inc',
    ),
    'product_type_admin_overview' => array(
      'variables' => array('type' => NULL),
      'file' => 'includes/commerce_product_ui.types.inc',
    ),
  );
}


/**
 * Checks to see if a given product type already exists.
 *
 * @param $type
 *   The string to match against existing types.
 *
 * @return
 *   TRUE or FALSE indicating whether or not the product type exists.
 */
function commerce_product_ui_validate_product_type_unique($type) {
  // Look for a match of the type.
  if ($match_id = db_query('SELECT type FROM {commerce_product_type} WHERE type = :type', array(':type' => $type))->fetchField()) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Access callback: determines if the user can edit or delete a product type.
 *
 * @param $type
 *   The machine-name of the product type to be edited or deleted.
 */
function commerce_product_ui_product_type_update_access($type) {
  $product_type = commerce_product_type_load($type);

  if ($product_type['module'] == 'commerce_product_ui') {
    return user_access('administer product types');
  }

  return FALSE;
}


/**
 * Menu item title callback: returns the SKU of a product for its pages.
 *
 * @param $product
 *   The product object as loaded via the URL wildcard.
 * @return
 *   A page title of the format "Product: [SKU]".
 */
function commerce_product_ui_product_title($product) {
  return t('Product: @sku', array('@sku' => $product->sku));
}


/**
 * Implements hook_form_FORM_ID_alter().
 *
 * The Product UI module instantiates the Product add/edit form at particular
 * paths in the Commerce IA. It uses its own form ID to do so and alters the
 * form here to add in appropriate redirection and an additional button.
 *
 * @see commerce_product_ui_product_form()
 */
function commerce_product_ui_form_commerce_product_ui_product_form_alter(&$form, &$form_state) {
  $product = $form_state['commerce_product'];

   // Add a submit handler to the save button to add a redirect.
  $form['actions']['submit']['#submit'][] = 'commerce_product_ui_product_form_submit';

  // Add the save and continue button for new products.
  if (empty($product->product_id)) {
    $form['actions']['save_continue'] = array(
      '#type' => 'submit',
      '#value' => t('Save and add another'),
      '#submit' => $form['actions']['submit']['#submit'],
      '#suffix' => l(t('Cancel'), 'admin/commerce/products'),
      '#weight' => 45,
    );
  }
  else {
    $form['actions']['submit']['#suffix'] = l(t('Cancel'), 'admin/commerce/products');
  }
}


/**
 * Submit callback for commerce_product_ui_product_form().
 *
 * @see commerce_product_ui_form_commerce_product_ui_product_form_alter()
 */
function commerce_product_ui_product_form_submit($form, &$form_state) {
  // Set the redirect based on the button clicked.
  $array_parents = $form_state['triggering_element']['#array_parents'];
  $submit_element = array_pop($array_parents);
  if ($submit_element == 'save_continue') {
    $form_state['redirect'] = 'admin/commerce/products/add/' . strtr($form_state['commerce_product']->type, array('_' => '-'));
  }
  elseif (arg(2) == 'products' && arg(3) == 'add') {
    $form_state['redirect'] = 'admin/commerce/products';
  }
}



/**
 * Implements hook_forms().
 */
function commerce_product_ui_forms($form_id, $args) {
  $forms = array();

  // Define a wrapper ID for the product add / edit form.
  $forms['commerce_product_ui_product_form'] = array(
    'callback' => 'commerce_product_product_form',
  );

  // Define a wrapper ID for the product delete confirmation form.
  $forms['commerce_product_ui_product_delete_form'] = array(
    'callback' => 'commerce_product_product_delete_form',
  );

  return $forms;
}
