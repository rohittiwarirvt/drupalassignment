<?php


/**
 * Saves a line item.
 *
 * @param $line_item
 *   The full line item object to save.
 *
 * @return
 *   SAVED_NEW or SAVED_UPDATED depending on the operation performed.
 */
function commerce_line_item_save($line_item) {
  return entity_get_controller('commerce_line_item')->save($line_item);
}


/**
 * @file
 * Defines the core Commerce line item entity and API functions interact with
 * line items on orders.
 */

/**
 * Implements hook_entity_info().
 */
function commerce_line_item_entity_info() {
  $return = array(
    'commerce_line_item' => array(
      'label' => t('Commerce Line item'),
      'controller class' => 'CommerceLineItemEntityController',
      'base table' => 'commerce_line_item',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'line_item_id',
        'bundle' => 'type',
        'label' => 'line_item_id', // TODO: Update to use a custom callback.
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'load hook' => 'commerce_line_item_load',
      'view modes' => array(
        'display' => array(
          'label' => t('Display'),
          'custom settings' => FALSE,
        ),
      ),
      'access callback' => 'commerce_line_item_access',
      'access arguments' => array(
        'access tag' => 'commerce_line_item_access',
      ),
      'metadata controller class' => '',
      'token type' => 'commerce-line-item',
      'permission labels' => array(
        'singular' => t('line item'),
        'plural' => t('line items'),
      ),

      // Prevent Redirect alteration of the line item form.
      'redirect' => FALSE,
    ),
  );

  $return['commerce_line_item']['bundles'] = array();
  foreach (commerce_line_item_type_get_name() as $type => $name) {
    $return['commerce_line_item']['bundles'][$type] = array(
      'label' => $name,
    );
  }

  return $return;
}


/**
 * Implements hook_hook_info().
 */
function commerce_line_item_hook_info() {
  $hooks = array(
    'commerce_line_item_type_info' => array(
      'group' => 'commerce',
    ),
    'commerce_line_item_type_info_alter' => array(
      'group' => 'commerce',
    ),
    'commerce_line_item_summary_link_info' => array(
      'group' => 'commerce',
    ),
    'commerce_line_item_summary_link_info_alter' => array(
      'group' => 'commerce',
    ),
    'commerce_line_item_access' => array(
      'group' => 'commerce',
    ),
    'commerce_line_item_update' => array(
      'group' => 'commerce',
    ),
    'commerce_line_item_insert' => array(
      'group' => 'commerce',
    ),
    'commerce_line_item_delete' => array(
      'group' => 'commerce',
    ),
    'commerce_line_item_rebase_unit_price' => array(
      'group' => 'commerce',
    ),
  );

  return $hooks;
}


/**
 * Returns the human readable name of any or all line item types.
 *
 * @param $type
 *   Optional parameter specifying the type whose name to return.
 *
 * @return
 *   Either an array of all line item type names keyed by the machine name or a
 *     string containing the human readable name for the specified type. If a
 *     type is specified that does not exist, this function returns FALSE.
 */
function commerce_line_item_type_get_name($type = NULL) {
  $line_item_types = commerce_line_item_types();

  // Return a type name if specified and it exists.
  if (!empty($type)) {
    if (isset($line_item_types[$type])) {
      return $line_item_types[$type]['name'];
    }
    else {
      // Return FALSE if it does not exist.
      return FALSE;
    }
  }

  // Otherwise turn the array values into the type name only.
  $line_item_type_names = array();

  foreach ($line_item_types as $key => $value) {
    $line_item_type_names[$key] = $value['name'];
  }

  return $line_item_type_names;
}




/**
 * Returns an array of line item type arrays keyed by type.
 */
function commerce_line_item_types() {
  // First check the static cache for a line item types array.
  $line_item_types = &drupal_static(__FUNCTION__);

  // If it did not exist, fetch the types now.
  if (!isset($line_item_types)) {
    $line_item_types = module_invoke_all('commerce_line_item_type_info');
    drupal_alter('commerce_line_item_type_info', $line_item_types);	
    foreach ($line_item_types as $type => &$line_item_type) {
      $defaults = array(
        'type' => $type,
        'product' => FALSE,
        'base' => $type,
        'callbacks' => array(),
      );
      $line_item_type += $defaults;    	

      // Merge in default callbacks.
      foreach (array('configuration', 'title', 'add_form', 'add_form_submit') as $callback) {
        if (!isset($line_item_type['callbacks'][$callback])) {
          $line_item_type['callbacks'][$callback] = $line_item_type['base'] . '_' . $callback;
        }
      }
    }
  }
  return $line_item_types;
}



/**
 * Returns a single line item type array.
 *
 * @param $type
 *   The machine-readable name of the line item type.
 *
 * @return
 *   The specified line item type array or FALSE if it does not exist.
 */
function commerce_line_item_type_load($type) {
  $line_item_types = commerce_line_item_types();

  return isset($line_item_types[$type]) ? $line_item_types[$type] : FALSE;
}



/**
 * Resets the cached list of line item types.
 */
function commerce_line_item_types_reset() {
  $line_item_types = &drupal_static('commerce_line_item_types');
  $line_item_types = NULL;
  entity_info_cache_clear();
}



/**
 * Wraps commerce_line_item_type_get_name() for the Entity module.
 */
function commerce_line_item_type_options_list() {
  return commerce_line_item_type_get_name();
}

/**
 * Title callback: return the human-readable line item type name.
 */
function commerce_line_item_type_title($line_item_type) {
  return $line_item_type['name'];
}

/**
 * Returns a path argument from a line item type.
 */
function commerce_line_item_type_to_arg($type) {
  return $type;
}


/**
 * Returns the specified callback for the given line item type if one exists.
 *
 * @param $line_item_type
 *   The line item type array.
 * @param $callback
 *   The callback function to return, one of:
 *   - configuration
 *   - title
 *   - add_form
 *   - add_form_validate
 *   - add_form_submit
 *
 * @return string
 *   A string containing the name of the callback function or FALSE if it could
 *   not be found.
 */

function commerce_line_item_type_callback($line_item_type, $callback) {
  // If the specified callback function exists, return it.
  if (!empty($line_item_type['callbacks'][$callback]) &&
      function_exists($line_item_type['callbacks'][$callback])) {
    return $line_item_type['callbacks'][$callback];
  }

  // Otherwise return FALSE.
  return FALSE;
}


/**
 * Returns an initialized line item object.
 *
 * @param $type
 *   The machine-readable type of the line item.
 * @param $order_id
 *   The ID of the order the line item belongs to (if available).
 *
 * @return
 *   A line item object with all default fields initialized.
 */
function commerce_line_item_new($type = '', $order_id = 0) {
  return entity_get_controller('commerce_line_item')->create(array(
    'type' => $type,
    'order_id' => $order_id,
  ));
}

/**
 * Saves a line item.
 *
 * @param $line_item
 *   The full line item object to save.
 *
 * @return
 *   SAVED_NEW or SAVED_UPDATED depending on the operation performed.
 */
function commerce_line_item_save($line_item) {
  return entity_get_controller('commerce_line_item')->save($line_item);
}

/**
 * Loads a line item by ID.
 */
function commerce_line_item_load($line_item_id) {
  $line_items = commerce_line_item_load_multiple(array($line_item_id), array());
  return $line_items ? reset($line_items) : FALSE;
}

/**
 * Loads multiple line items by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $line_item_ids
 *   An array of line item IDs.
 * @param $conditions
 *   An array of conditions on the {commerce_line_item} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal line item loading cache.
 *
 * @return
 *   An array of line item objects indexed by line_item_id.
 */
function commerce_line_item_load_multiple($line_item_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('commerce_line_item', $line_item_ids, $conditions, $reset);
}

/**
 * Deletes a line item by ID.
 *
 * @param $line_item_id
 *   The ID of the line item to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function commerce_line_item_delete($line_item_id) {
  return commerce_line_item_delete_multiple(array($line_item_id));
}

/**
 * Deletes multiple line items by ID.
 *
 * @param $line_item_ids
 *   An array of line item IDs to delete.
 *
 * @return
 *   TRUE on success, FALSE otherwise.
 */
function commerce_line_item_delete_multiple($line_item_ids) {
  return entity_get_controller('commerce_line_item')->delete($line_item_ids);
}

/**
 * Deletes any references to the given line item.
 */
function commerce_line_item_delete_references($line_item) {
  // Check the data in every line item reference field.
  foreach (commerce_info_fields('commerce_line_item_reference') as $field_name => $field) {
    // Query for any entity referencing the deleted line item in this field.
    $query = new EntityFieldQuery();
    $query->fieldCondition($field_name, 'line_item_id', $line_item->line_item_id, '=');
    $result = $query->execute();

    // If results were returned...
    if (!empty($result)) {
      // Loop over results for each type of entity returned.
      foreach ($result as $entity_type => $data) {
        // Load the entities of the current type.
        $entities = entity_load($entity_type, array_keys($data));

        // Loop over each entity and remove the reference to the deleted line item.
        foreach ($entities as $entity_id => $entity) {
          commerce_entity_reference_delete($entity, $field_name, 'line_item_id', $line_item->line_item_id);

          entity_save($entity_type, $entity);
        }
      }
    }
  }
}

/**
 * Determines access to perform an operation on a particular line item.
 *
 * @param $op
 *   The operation to perform on the line item, either 'update' or 'delete'.
 * @param $line_item
 *   The line item object in question.
 * @param $account
 *   The user account whose access should be checked; defaults to the current
 *   user if left NULL.
 *
 * @return
 *   TRUE or FALSE indicating whether or not access should be granted.
 */
function commerce_line_item_access($op, $line_item, $account = NULL) {
  global $user;
  $account = isset($account) ? $account : clone($user);

  // If the user has the administration permission, return TRUE now.
  if (user_access('administer line items', $account)) {
    return TRUE;
  }

  // For users who don't have the general administration permission, we have to
  // determine access to update or delete a given line item through a connection
  // to an Order.
  if (!empty($line_item->order_id) && module_exists('commerce_order')) {
    $order = commerce_order_load($line_item->order_id);
    return commerce_order_access($op, $order, $account);
  }

  // Issue a blanket refusal of access in the event the order module is not
  // enabled, as we have no other way of determining line item access outside of
  // the 'administer line items' permission.
  return FALSE;
}

/**
 * Implements hook_query_TAG_alter().
 *
 * Implement access control on line items. This is different from other entities
 * because the access to a line item is totally delegated to its order.
 */
function commerce_line_item_query_commerce_line_item_access_alter(QueryAlterableInterface $query) {
  // Read the meta-data from the query.
  if (!$account = $query->getMetaData('account')) {
    global $user;
    $account = $user;
  }

  // If the user has the administration permission, nothing to do.
  if (user_access('administer line items', $account)) {
    return;
  }

  // Join the line items to their orders.
  if (module_exists('commerce_order')) {
    $tables = &$query->getTables();

    // Look for an existing commerce_order table.
    foreach ($tables as $table) {
      if ($table['table'] === 'commerce_order') {
        $order_alias = $table['alias'];
        break;
      }
    }

    // If not found, attempt a join against the first table.
    if (!isset($order_alias)) {
      reset($tables);
      $base_table = key($tables);
      $order_alias = $query->innerJoin('commerce_order', 'co', '%alias.order_id = ' . $base_table . '.order_id');
    }

    // Perform the access control on the order.
    commerce_entity_access_query_alter($query, 'commerce_order', $order_alias);
  }
  else {
    // The user has access to no line item.
    $query->where('1 = 0');
  }
}

/**
 * Returns the title of a line item based on its type.
 *
 * Titles are returned sanitized and so do not need to be sanitized again prior
 * to display.
 *
 * @param $line_item
 *   The line item object whose title should be returned.
 *
 * @return
 *   The type-dependent title of the line item.
 */
function commerce_line_item_title($line_item) {
  // Find the line item type's title callback.
  $line_item_type = commerce_line_item_type_load($line_item->type);
  $title_callback = commerce_line_item_type_callback($line_item_type, 'title');

  return $title_callback ? $title_callback($line_item) : '';
}

/**
 * Implements hook_field_info().
 */
function commerce_line_item_field_info() {
  return array(
    'commerce_line_item_reference' => array(
      'label' => t('Line item reference'),
      'description' => t('This field stores the ID of a related line item as an integer value.'),
      'settings' => array(),
      'instance_settings' => array(),
      'default_widget' => 'commerce_line_item_manager',
      'default_formatter' => 'commerce_line_item_reference_view',
      'property_type' => 'commerce_line_item',
      'property_callbacks' => array('commerce_line_item_property_info_callback'),
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 * Possible error codes:
 * - 'invalid_line_item_id': line_item_id is not valid for the field (not a
 *                           valid line item ID).
 */
function commerce_line_item_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
    $translated_instance = commerce_i18n_object('field_instance', $instance);

  // Extract line_item_ids to check.
  $line_item_ids = array();
  // First check non-numeric line_item_id's to avoid losing time with them.
  foreach ($items as $delta => $item) {
    if (is_array($item) && !empty($item['line_item_id'])) {
      if (is_numeric($item['line_item_id'])) {
        $line_item_ids[] = $item['line_item_id'];
      }
      else {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'invalid_line_item_id',
          'message' => t('%name: you have specified an invalid line item for this field.', array('%name' => $translated_instance['label'])),
        );
      }
    }
  }  // Prevent performance hog if there are no ids to check.
  if ($line_item_ids) {
    $line_items = commerce_line_item_load_multiple($line_item_ids);

    foreach ($items as $delta => $item) {
      if (is_array($item)) {
        if (!empty($item['line_item_id']) && !isset($line_items[$item['line_item_id']])) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'invalid_line_item_id',
            'message' => t('%name: you have specified an invalid line item for this reference field.', array('%name' => $translated_instance['label'])),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 */
function commerce_line_item_field_is_empty($item, $field) {
  // line_item_id = 0 is empty too, which is exactly what we want.
  return empty($item['line_item_id']);
}

/**
 * Implements hook_field_formatter_info().
 */
function commerce_line_item_field_formatter_info() {
  return array(
    'commerce_line_item_reference_view' => array(
      'label' => t('Line item View'),
      'description' => t('Display the line items via a default View.'),
      'field types' => array('commerce_line_item_reference'),
      'settings' => array(
        'view' => 'commerce_line_item_table|default',
      ),
    ),
  );
}


/**
 * Implements hook_field_formatter_settings_form().
 */
function commerce_line_item_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  if ($display['type'] == 'commerce_line_item_reference_view') {
    // Build an options array of Views available for the order contents pane.
    $options = array();

     // Generate an option list from all user defined and module defined views.
     foreach (views_get_all_views() as $name => $view) {
      // Only include line item Views.
      if ($view->base_table == 'commerce_line_item') {
         foreach ($view->display as $display_name => $display) {
          $options[check_plain($name)][$name .'|'. $display_name] = $display->display_title;
        }
       }
     }

    $element['view'] = array(
          '#type' => 'select',
          '#title' => t('Order contents View'),
          '#description' => t('Specify the View to use to display the line items referenced by this field.'),
          '#options' => $options,
          '#default_value' => $settings['view'],
        );
      }

  return $element;
}


/**
 * Implements hook_field_formatter_settings_summary().
 */
function commerce_line_item_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();

  if ($display['type'] == 'commerce_line_item_reference_view') {
    // Load the View and display its information in the summary.
    list($name, $display_name) = explode('|', $display['settings']['view']);
    $view = views_get_view($name);

    $summary = t('View: @name - @display', array('@name' => $view->name, '@display' => $view->display[$display_name]->display_title));
  }

  return $summary;
}


/**
 * Implements hook_field_formatter_view().
 */
function commerce_line_item_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $result = array();

  // Collect the list of line item IDs.
  $line_item_ids = array();

  foreach ($items as $delta => $item) {
    $line_item_ids[] = $item['line_item_id'];
  }
  switch ($display['type']) {
    case 'commerce_line_item_reference_view':
      // Extract the View and display ID from the setting.
      list($view_id, $display_id) = explode('|', $display['settings']['view']);

      $result[0] = array(
        '#markup' => commerce_embed_view($view_id, $display_id, array(implode(',', $line_item_ids))),
      );

      break;
  }

  return $result;
}



/**
 * Implements hook_field_widget_info().
 *
 * Defines widgets available for use with field types as specified in each
 * widget's $info['field types'] array.
 */
function commerce_line_item_field_widget_info() {
  $widgets = array();

  // Define the creation / reference widget for line items.
  $widgets['commerce_line_item_manager'] = array(
    'label' => t('Line item manager'),
    'description' => t('Use a complex widget to manager the line items referenced by this object.'),
    'field types' => array('commerce_line_item_reference'),
    'settings' => array(),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      'default value' => FIELD_BEHAVIOR_NONE,
    ),
  );

  // Do not show the widget on forms; useful in cases where line item reference
  // fields will be attached to non-order entities and managed by code.
  $widgets['commerce_line_item_reference_hidden'] = array(
    'label' => t('Do not show a widget'),
    'description' => t('Will not display the line item reference field on forms. Use only if you maintain line item references some other way.'),
    'field types' => array('commerce_line_item_reference'),
    'settings' => array(),
    'behaviors' => array(
      'multiple values' => FIELD_BEHAVIOR_CUSTOM,
    ),
  );

  return $widgets;
}

/**
 * Implements hook_field_widget_form().
 *
 * Used to define the form element for custom widgets.
 */
function commerce_line_item_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  // Define the complex line item reference field widget.
  if ($instance['widget']['type'] == 'commerce_line_item_manager') {
    $line_item_ids = array();

 // Build an array of line item IDs from this field's values.
    foreach ($items as $item) {
      $line_item_ids[] = $item['line_item_id'];
    }

    // Load the line items for temporary storage in the form array.
    if(!empty($line_item_ids)) {
      $line_items = commerce_line_item_load_multiple($line_item_ids);
    }
    else {
      $line_items = array();
    }

      // Update the base form element array to use the proper theme and validate
    // functions and to include header information for the line item table.
    $element += array(
      '#theme' => 'commerce_line_item_manager',
      '#element_validate' => array('commerce_line_item_manager_validate'),
      '#header' => array(t('Remove'), t('Title'), t('SKU'), t('Unit price'), t('Quantity'), t('Total')),
      '#empty' => t('No line items found.'),
      'line_items' => array(),
    );


    if (!empty($form_state['line_item_save_warning'])) {
      drupal_set_message(t('New line items on this order will not be saved until the <em>Save order</em> button is clicked.'), 'warning');
    }


        // Add a set of elements to the form for each referenced line item.
    foreach ($line_items as $line_item_id => $line_item) {
      // Store the original line item for later comparison.
      $element['line_items'][$line_item_id]['line_item'] = array(
        '#type' => 'value',
        '#value' => $line_item,
      );
      // This checkbox will be overridden with a clickable delete image.
      $element['line_items'][$line_item_id]['remove'] = array(
        '#type' => 'checkbox',
        '#default_value' => FALSE,
      );

      $element['line_items'][$line_item_id]['title'] = array(
        '#markup' => commerce_line_item_title($line_item),
      );

      $element['line_items'][$line_item_id]['line_item_label'] = array(
        '#markup' => check_plain($line_item->line_item_label),
      );      

      // Retrieve the widget form for just the unit price.
      $widget_form = _field_invoke_default('form', 'commerce_line_item', $line_item, $form, $form_state, array('field_name' => 'commerce_unit_price'));
      
      // Unset the title and description and add it to the line item form.
      $language = $widget_form['commerce_unit_price']['#language'];
      $widget_form['commerce_unit_price'][$language][0]['amount']['#title_display'] = 'invisible';
      
      $element['line_items'][$line_item_id]['commerce_unit_price'] = $widget_form['commerce_unit_price'];
      $quantity = round($line_item->quantity);

      $element['line_items'][$line_item_id]['quantity'] = array(
        '#type' => 'textfield',
        '#datatype' => 'integer',
        '#default_value' => $quantity,
        '#size' => 4,
        '#maxlength' => max(4, strlen($quantity)),
      );

      // Wrap the line item and add its formatted total to the form.
      $wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
      $element['line_items'][$line_item_id]['commerce_total'] = array(
        '#markup' => commerce_currency_format($wrapper->commerce_total->amount->value(), $wrapper->commerce_total->currency_code->value(), $line_item),
      );
    }
    // If the the form has been instructed to add a line item...
    if (!empty($form_state['line_item_add'])) {
      // Load the info object for the selected line item type.
      $line_item_type = commerce_line_item_type_load($form_state['line_item_add']);

      // Store the line item info object in the form array.
      $element['actions']['line_item_type'] = array(
        '#type' => 'value',
        '#value' => $line_item_type,
      );
      // If this type specifies a valid add form callback function...
      if ($callback = commerce_line_item_type_callback($line_item_type, 'add_form')) {
        // Load in the appropriate form elements to the actions array.
        $element['actions'] += $callback($element, $form_state);
      }

            // Add a default save button.
      $element['actions'] += array(
        'save_line_item' => array(
          '#type' => 'button',
          '#value' => !empty($line_item_type['add_form_submit_value']) ? $line_item_type['add_form_submit_value'] : t('Save'),
          '#limit_validation_errors' => array(array_merge($element['#field_parents'], array($field['field_name']))),
          '#ajax' => array(
            'callback' => 'commerce_line_item_manager_refresh',
            'wrapper' => 'line-item-manager',
          ),
        ),
      );

      $element['actions']['cancel'] = array(
        '#type' => 'button',
        '#value' => t('Cancel'),
        '#limit_validation_errors' => array(),
        '#ajax' => array(
          'callback' => 'commerce_line_item_manager_refresh',
          'wrapper' => 'line-item-manager',
        ),
      );
    }
   else {
      // Otherwise display the select list to add a new line item.
      $options = commerce_line_item_type_get_name();

      // Only display the line item selector if line item types exist.
      if (!empty($options)) {
        $element['actions']['line_item_type'] = array(
          '#type' => 'select',
          '#options' => commerce_line_item_type_get_name(),
          '#prefix' => '<div class="add-line-item">',
        );
        $element['actions']['line_item_add'] = array(
          '#type' => 'button',
          '#value' => t('Add line item'),
          '#limit_validation_errors' => array(array_merge($element['#field_parents'], array($field['field_name']))),
          '#ajax' => array(
            'callback' => 'commerce_line_item_manager_refresh',
            'wrapper' => 'line-item-manager',
          ),
          '#suffix' => '</div>',
        );
      }
    }

    return $element;
  }
  elseif ($instance['widget']['type'] == 'commerce_line_item_reference_hidden') {
    return array();
  }
}

/**
 * Returns the line item manager element for display via AJAX.
 */
function commerce_line_item_manager_refresh($form, $form_state) {
  // Reverse the array parents of the triggering element, because we know the
  // part of the form to return will be 3 elements up from the triggering element.
  $parents = array_reverse($form_state['triggering_element']['#array_parents']);
  return $form[$parents[3]][$form[$parents[3]]['#language']];
}

/**
 * Themes the line item manager widget form element.
 */
function theme_commerce_line_item_manager($variables) {
  drupal_add_css(drupal_get_path('module', 'commerce_line_item') . '/theme/commerce_line_item.admin.css');

  $form = $variables['form'];
  $rows = array();

  // Add each line item to the table.
  foreach (element_children($form['line_items']) as $line_item_id) {
    $row = array(
      drupal_render($form['line_items'][$line_item_id]['remove']),
      drupal_render($form['line_items'][$line_item_id]['title']),
      drupal_render($form['line_items'][$line_item_id]['line_item_label']),
      drupal_render($form['line_items'][$line_item_id]['commerce_unit_price']),
      drupal_render($form['line_items'][$line_item_id]['quantity']),
      drupal_render($form['line_items'][$line_item_id]['commerce_total']),
    );

    $rows[] = $row;
  }

  // Setup the table's variables array and build the output.
  $table_variables = array(
    'caption' => check_plain($form['#title']),
    'header' => $form['#header'],
    'rows' => $rows,
    'empty' => $form['#empty'],
  );

  $output = theme('table', $table_variables) . drupal_render($form['actions']);

  return '<div id="line-item-manager" class="clearfix">' . $output . '</div>';
}