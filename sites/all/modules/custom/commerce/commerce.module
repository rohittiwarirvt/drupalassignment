<?php


function commerce_currencies($enabled = FALSE, $reset = FALSE) {
  global $language;

  $currencies =  &drupal_static(__FUNCTION__);

  if (!isset($currencies) || $reset) {

    if (!$reset && $currencies_cached = cache_get('commerce_currencies:' . $language->$language)) {
      $currencies['all'] = $currencies_cached->data;
    } else {
      $defaults = array(
         'symbol' => '',
        'minor_unit' => '',
        'decimals' => 2,
        'rounding_step' => 0,
        'thousands_separator' => ',',
        'decimal_separator' => '.',
        'symbol_placement' => 'hidden',
        'symbol_spacer' => ' ',
        'code_placement' => 'after',
        'code_spacer' => ' ',
        'format_callback' => '',
        'conversion_callback' => '',
        'conversion_rate' => 1,);
      module_load_include('inc', 'commerce', 'includes/commerce.currencies');
      $currencies['all'] = module_invoke_all('commerce_currency_info');
      drupal_alter('commerce_currency_info', $currency['all'], $language->language);

      foreach ($currencies['all'] as $currency_code => $currency) {
        $currency['all'][$currency_code] = array_merge($defaults, $currency);
      }

      ksort($currency['all']);
      cache_set('commerce_currencies:' . $language->language, $currencies['all']);
    }

    $enabled_currencies = array_diff(array_values(variable_get('commerce_enabled_currencies', array('USD' => 'USD'))), array(0));
    $currencies['enabled'] = array_intersect_key($currencies['all'], drupal_map_assoc($enabled_currencies));
  }

  return $enabled ? $currencies['enabled'] : $currencies['all'];
}

function commerce_default_currency() {
  $currency_code = variable_get('commerce_default_currency', 'USD');
  drupal_alter('commerce_default_currency', $currency_code);
  return $currency_code;
}

function commerce_permission() {
  return array(
      'configure store' => array(
          'title' => t('Configure Store Settings'),
          'description' => t('Allows user to update store currency and contact settings.'),
          'restrict access' => TRUE,
        )
    );
}

function commerce_delete_instances($entity_type, $bundle = NULL) {
  $params = [
    'entity_type' => $entity_type
  ];

  if ( !empty($bundle)) {
    $params['bundle'] = $bundle;
    variable_del('field_bundle_settings_' . $entity_type . '__' . $bundle);
  } else {
    db_delete('variable')
      ->condition('name', db_like('field_bundle_settings_' . $entity_type . '__') . '%', 'LIKE')
      ->execute();
  }

  foreach (field_read_instances($params, array('include_inactive' => TRUE)) as $instance) {
    commerce_delete_instance($instance);
  }
}

function commerce_delete_instance($instance) {
  $field_name = $instance['field_name'];
  $activated = commerce_activate_field($field_name);

  if ($activated) {
    field_cache_clear();
  }

  field_delete_instance($intace, FALSE);

  $field = field_info_field($field_name);

  if( count($field['bundles']) == 0) {
    field_delete_field($field_name);
  } elseif ($activated) {
    $field['active'] =0;
    field_update_field($field);
  }
}


function commerce_entity_access($op, $entity, $account, $entity_type) {
  global $user;
  $account = isset($accout) ? $account : $user;
  $entity_info = entity_get_info($entity_type);
  if ($op == 'view') {
    if (isset($entity)) {
      if (!empty($entity_info['access arguments']['access tag']) &&  module_implements('query_' . $entity_info['access arguments']['access tag'] . '_alter')) {
        $query = db_select($entity_info['base table']);
        $query->addExpression('1');
        return (bool) $query
              ->addTag($entity_info['access arguments']['acess tag'])
              -> addMetaData('account', $account)
              ->addMetaData('entity', $entity)
              ->condition($entity_info['entity keys']['id'], $entity->{$entity_info['entity keys']['id']})
              ->range(0, 1)
              ->execute()
              ->fetchField();
      } else {
        return TRUE;
      }
    } else {
      return user_access('view any ' . $entity_type . ' entity', $account);
    }
  } else {
    $access_results = module_invoke_all('commerce_entity_access', $op, $entity, $account, $entity_type);

        if (in_array(FALSE, $access_results, TRUE)) {
      return FALSE;
    }
    elseif (in_array(TRUE, $access_results, TRUE)) {
      return TRUE;
    }

    if (user_access('administer ' . $entity_type . ' entities', $account)) {
      return TRUE;
    }

    if ($op == 'create') {
        if (isset($entity) && !empty($entity_info['entity keys']['bundle'])) {
        return user_access('create ' . $entity_type . ' entities', $account) || user_access('create ' . $entity_type . ' entities of bundle ' . $entity->{$entity_info['entity keys']['bundle']}, $account);
      }
      else {
        // Otherwise perform an entity type-level access check.
        return user_access('create ' . $entity_type . ' entities', $account);
      }
    } else {
        $bundle_name = '';

      if (isset($entity) && !empty($entity_info['entity keys']['bundle'])) {
        $bundle_name = $entity->{$entity_info['entity keys']['bundle']};
      }

      if (user_access('edit any ' . $entity_type . ' entity', $account) ||
        user_access('edit any ' . $entity_type . ' entity of bundle ' . $bundle_name, $account)) {
        return TRUE;
      }
      // Then check an authenticated user's access to edit his own entities.
      if ($account->uid && !empty($entity_info['access arguments']['user key']) && isset($entity->{$entity_info['access arguments']['user key']}) && $entity->{$entity_info['access arguments']['user key']} == $account->uid) {
        if (user_access('edit own ' . $entity_type . ' entities', $account) ||
          user_access('edit own ' . $entity_type . ' entities of bundle ' . $bundle_name, $account)) {
          return TRUE;
        }
      }
    }
  }

  return FALSE;
}

/**
 * Return permission names for a given entity type.
 */
function commerce_entity_access_permissions($entity_type) {
  $entity_info = entity_get_info($entity_type);
  $labels = $entity_info['permission labels'];

  $permissions = array();

  // General 'administer' permission.
  $permissions['administer ' . $entity_type . ' entities'] = array(
    'title' => t('Administer @entity_type', array('@entity_type' => $labels['plural'])),
    'description' => t('Allows users to perform any action on @entity_type.', array('@entity_type' => $labels['plural'])),
    'restrict access' => TRUE,
  );

  // Generic create and edit permissions.
  $permissions['create ' . $entity_type . ' entities'] = array(
    'title' => t('Create @entity_type of any type', array('@entity_type' => $labels['plural'])),
  );
  if (!empty($entity_info['access arguments']['user key'])) {
    $permissions['edit own ' . $entity_type . ' entities'] = array(
      'title' => t('Edit own @entity_type of any type', array('@entity_type' => $labels['plural'])),
    );
  }
  $permissions['edit any ' . $entity_type . ' entity'] = array(
    'title' => t('Edit any @entity_type of any type', array('@entity_type' => $labels['singular'])),
    'restrict access' => TRUE,
  );
  if (!empty($entity_info['access arguments']['user key'])) {
    $permissions['view own ' . $entity_type . ' entities'] = array(
      'title' => t('View own @entity_type of any type', array('@entity_type' => $labels['plural'])),
    );
  }
  $permissions['view any ' . $entity_type . ' entity'] = array(
    'title' => t('View any @entity_type of any type', array('@entity_type' => $labels['singular'])),
    'restrict access' => TRUE,
  );

  // Per-bundle create and edit permissions.
  if (!empty($entity_info['entity keys']['bundle'])) {
    foreach ($entity_info['bundles'] as $bundle_name => $bundle_info) {
      $permissions['create ' . $entity_type . ' entities of bundle ' . $bundle_name] = array(
        'title' => t('Create %bundle @entity_type', array('@entity_type' => $labels['plural'], '%bundle' => $bundle_info['label'])),
      );
      if (!empty($entity_info['access arguments']['user key'])) {
        $permissions['edit own ' . $entity_type . ' entities of bundle ' . $bundle_name] = array(
          'title' => t('Edit own %bundle @entity_type', array('@entity_type' => $labels['plural'], '%bundle' => $bundle_info['label'])),
        );
      }
      $permissions['edit any ' . $entity_type . ' entity of bundle ' . $bundle_name] = array(
        'title' => t('Edit any %bundle @entity_type', array('@entity_type' => $labels['singular'], '%bundle' => $bundle_info['label'])),
        'restrict access' => TRUE,
      );
      if (!empty($entity_info['access arguments']['user key'])) {
        $permissions['view own ' . $entity_type . ' entities of bundle ' . $bundle_name] = array(
          'title' => t('View own %bundle @entity_type', array('@entity_type' => $labels['plural'], '%bundle' => $bundle_info['label'])),
        );
      }
      $permissions['view any ' . $entity_type . ' entity of bundle ' . $bundle_name] = array(
        'title' => t('View any %bundle @entity_type', array('@entity_type' => $labels['singular'], '%bundle' => $bundle_info['label'])),
        'restrict access' => TRUE,
      );
    }
  }

  return $permissions;
}


function commerce_delete_fields() {
  // Read the fields for any active or inactive field of the specified type.
  foreach (field_read_fields(array('type' => $type), array('include_inactive' => TRUE)) as $field_name => $field) {
    commerce_delete_field($field_name);
  }
}


/**
 * Enables and deletes the specified field.
 *
 * The normal API function for deleting fields, field_delete_field(), will not
 * work on disabled fields. As a workaround, this function first activates the
 * fields of the specified type and then deletes them.
 *
 * @param $field_name
 *   The name of the field to enable and delete.
 */
function commerce_delete_field($field_name) {
  // In case the field is inactive, first activate it and clear the field cache.
  if (commerce_activate_field($field_name)) {
    field_cache_clear();
  }

  // Delete the field.
  field_delete_field($field_name);
}

function commerce_activate_field($field_name) {
  // Set it to active via a query because field_update_field() does
  // not work on inactive fields.
  $updated = db_update('field_config')
    ->fields(array('active' => 1))
    ->condition('field_name', $field_name, '=')
    ->condition('deleted', 0, '=')
    ->execute();

  return !empty($updated) ? TRUE : FALSE;
}


/**
 * Converts a price amount to a decimal value based on the currency.
 *
 * @param $amount
 *   The price amount to convert to a decimal value.
 * @param $currency_code
 *   The currency code of the price whose decimals value will be used to
 *     divide by the proper divisor when converting the amount.
 *
 * @return
 *   The decimal amount depending on the number of places the currency uses.
 */
function commerce_currency_amount_to_decimal($amount, $currency_code) {
    static $divisors;

  // If the divisor for this currency hasn't been calculated yet...
  if (empty($divisors[$currency_code])) {
    // Load the currency and calculate its divisor as a power of 10.
    $currency = commerce_currency_load($currency_code);
    $divisors[$currency_code] = pow(10, $currency['decimals']);
  }

  return $amount / $divisors[$currency_code];
}


/**
 * Returns a single currency array.
 *
 * @param $currency_code
 *   The code of the currency to return or NULL to return the default currency.
 *
 * @return
 *   The specified currency array or FALSE if it does not exist.
 */
function commerce_currency_load($currency_code = NULL) {
  $currencies = commerce_currencies();
  // Check to see if we should return the default currency.
  if (empty($currency_code)) {
    $currency_code = commerce_default_currency();
  }
    return isset($currencies[$currency_code]) ? $currencies[$currency_code] : FALSE;
}


/**
 * Returns the data array of a single value price field from a wrapped entity,
 * using an optional default value if the entity does not have data in the field.
 *
 * @param $wrapper
 *   An EntityMetadataWrapper for the entity whose price should be retrieved.
 * @param $field_name
 *   The name of the field to retrieve data from in the wrapper.
 * @param $default
 *   Boolean indicating whether or not to return a default price array if the
 *   entity does not have data in the specified price field.
 *
 * @return
 *   The data array of the specified price field.
 */
function commerce_price_wrapper_value($wrapper, $field_name, $default = FALSE) {
  // Extract the price field's value array from the given entity.
  $price = $wrapper->{$field_name}->value();

  // If the value is empty and we want to return a default value for the field,
  // use the auto creation value defined for Entity API usage.
  if (empty($price) && $default) {
    $price = commerce_price_field_data_auto_creation();
  }

  return $price;
}

/**
 * Implements hook_commerce_price_component_type_info().
 */
function commerce_price_commerce_price_component_type_info() {
  return array(
    'base_price' => array(
      'title' => t('Base price'),
      'display_title' => t('Subtotal'),
      'weight' => -50,
    ),
    'discount' => array(
      'title' => t('Discount'),
      'weight' => -10,
    ),
    'fee' => array(
      'title' => t('Fee'),
      'weight' => -20,
    ),
  );
}


/**
 * Returns a list of all available price component types.
 */
function commerce_price_component_types() {
  // First check the static cache for a components array.
  $component_types = &drupal_static(__FUNCTION__);
 // If it did not exist, fetch the types now.
  if (!isset($component_types)) {
    // Find components defined by hook_commerce_price_component_type_info().
    $component_types = module_invoke_all('commerce_price_component_type_info');

    // Add default values to the component type definitions.
    foreach ($component_types as $name => &$component_type) {
      $component_type += array(
        'name' => $name,
        'display_title' => $component_type['title'],
        'weight' => 0,
      );
    }

    // Allow the info to be altered by other modules.
    drupal_alter('commerce_price_component_type_info', $component_types);
  }

  return $component_types;
}

/**
 * Returns an array of price component type titles keyed by name.
 */
function commerce_price_component_titles() {
  static $titles = array();

  if (empty($titles)) {
    foreach (commerce_price_component_types() as $name => $component_type) {
      $titles[$name] = $component_type['title'];
    }
  }

  return $titles;
}


/**
 * Returns a component type array.
 *
 * @param $name
 *   The machine-name of the component type to return.
 *
 * @return
 *   A component type array or FALSE if not found.
 */
function commerce_price_component_type_load($name) {
  $component_types = commerce_price_component_types();
  return !empty($component_types[$name]) ? $component_types[$name] : FALSE;
}


/**
 * Adds a price component to a price's data array.
 *
 * @param $price
 *   The price array the component should be added to.
 * @param $type
 *   The machine-name of the component type to be added to the array.
 * @param $component_price
 *   The price array for the component as defined by the price field.
 * @param $included
 *   Boolean indicating whether or not the price component has already been
 *   included in the price the component is being added to.
 * @param $add_base_price
 *   Boolean indicating whether or not to add the base price component if it is
 *   missing.
 *
 * @return
 *   The updated data array.
 */
function commerce_price_component_add($price, $type, $component_price, $included, $add_base_price = TRUE) {
    // If no price components have been added yet, add the base price first.
  if ($add_base_price && empty($price['data']['components']) && $type != 'base_price') {
    $price['data'] = commerce_price_component_add($price, 'base_price', $price, TRUE);
  }

  $price['data']['components'][] = array(
    'name' => $type,
    'price' => $component_price,
    'included' => $included,
  );
  return $price['data'];
}

/**
 * Returns every component of a particular type from a price's data array.
 *
 * @param $price
 *   The price array to load components from.
 * @param $type
 *   The machine-name of the component type to load.
 *
 * @return
 *   An array of components from the data array matching the type.
 */

function commerce_price_component_load($price, $type) {
  $components = array();

  if (!empty($price['data']['components'])) {
    foreach ($price['data']['components'] as $key => $component) {
      if ($component['name'] == $type) {
        $components[] = $component;
      }
    }
  }

  return $components;
}

/**
 * Remove all instances of a particular component from a price's data array.
 *
 * @param &$price
 *   The price array to remove components from.
 * @param $type
 *   The machine-name of the component type to delete.
 *
 * @return
 *   The updated data array.
 */
function commerce_price_component_delete($price, $type) {
  foreach ((array) $price['data']['components'] as $key => $component) {
    if ($component['name'] == $type) {
      unset($price['data']['components'][$key]);
    }
  }

  return $price['data'];
}


/**
 * Converts a price amount from a currency to the target currency based on the
 *   current currency conversion rates.
 *
 * The Commerce module establishes a default conversion rate for every currency
 * as 1, so without any additional information there will be a 1:1 conversion
 * from one currency to the next. Other modules can provide UI based or web
 * service based alterations to the conversion rate of the defined currencies as
 * long as every rate is calculated relative to a single base currency. It does
 * not matter which currency is the base currency as long as the same one is
 * used for every rate calculation.
 *
 * To convert an amount from one currency to another, we simply take the amount
 * value and multiply it by the current currency's conversion rate divided by
 * the target currency's conversion rate.
 *
 * @param $amount
 *   The numeric amount value of the price to be rounded.
 * @param $currency_code
 *   The currency code for the current currency of the price.
 * @param $target_currency_code
 *   The currency code for the target currency of the price.
 *
 * @return
 *   The numeric amount value converted to its equivalent in the target currency.
 */
function commerce_currency_convert($amount, $currency_code, $target_currency_code) {
  $currency = commerce_currency_load($currency_code);

   // Invoke the custom conversion callback if specified.
  if (!empty($currency['conversion_callback'])) {
    return $currency['conversion_callback']($amount, $currency_code, $target_currency_code);
  }
  $target_currency = commerce_currency_load($target_currency_code);
  // First multiply the amount to accommodate differences in decimals between
  // the source and target currencies.
  $exponent = $target_currency['decimals'] - $currency['decimals'];
  $amount *= pow(10, $exponent);
  return $amount * ($currency['conversion_rate'] / $target_currency['conversion_rate']);
}
/**
 * Combines the price components of two prices into one components array,
 *   merging all components of the same type into a single component.
 *
 * @param $price
 *   The base price array whose full data array will be returned.
 * @param $price2
 *   A price array whose components will be combined with those of the base price.
 *
 * @return
 *   A data array with the two sets of components combined but without any
 *     additional data from $price2's data array.
 */

function commerce_price_components_combine($price, $price2) {
  // Ensure the base price data array has a components array.
  if (empty($price['data']['components'])) {
    $price['data']['components'] = array();
  }

    // Loop over the components in the second price's data array.
  foreach ($price2['data']['components'] as $key => $component) {
    if ($component['price']['currency_code'] != $price['currency_code']) {
      $component['price']['amount'] = commerce_currency_convert($component['price']['amount'], $component['price']['currency_code'], $price['currency_code']);
